{
  "author": {
    "name": "Jake Luer",
    "email": "jake@alogicalparadox.com"
  },
  "name": "chai-http",
  "description": "Extend Chai Assertion library with tests for http apis",
  "version": "0.4.0",
  "repository": {
    "type": "git",
    "url": "git@github.com:chaijs/chai-http.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "harbor": "0.2.x",
    "methods": "0.0.x",
    "pauli": "0.0.x",
    "superagent": "0.14.x"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "dox": "*"
  },
  "optionalDependencies": {},
  "readme": "# Chai HTTP\n\n> HTTP integration testing with Chai assertions.\n\n#### Features\n\n- integration test request composition\n- test http apps or external services\n- assertions for common http tasks\n- chai `expect` and `should` interfaces\n\n#### Installation\n\nThis is a addon plugin for the [Chai Assertion Library](http://chaijs.com). Install via [npm](http://npmjs.org).\n\n    npm install chai-http\n\n#### Plugin\n\nUse this plugin as you would all other Chai plugins.\n\n```js\nvar chai = require('chai')\n  , chaiHttp = require('chai-http');\n\nchai.use(chaiHttp);\n```\n\n\n## Integration Testing\n\nChai HTTP provides and interface for live integration\ntesting via [superagent](https://github.com/visionmedia/superagent).\nTo do this, you must first\nconstruct a request to an application or url.\n\nUpon construction you are provided a chainable api that\nallow to you specify the http VERB request (get, post, etc)\nthat you wish to invoke.\n\n#### Application / Server\n\nYou may use a function (such as an express or connect app)\nor a node.js http(s) server as the foundation for your request.\nIf the server is not running, chai-http will find a suitable\nto listen on for tha given test.\n\n```js\nchai.request(app)\n  .get('/')\n```\n\n#### URL\n\nYou may also use a base url as the foundation of your request.\n\n```js\nchai.request('http://localhost:8080')\n  .get('/')\n```\n\n### .req (cb)\n\n* **@param** _{Function}_ callback \n* **@cb** {Request} object\n* **@cb** {Function} next (optional)\n* **@returns** {this} for chaining\n\nYou may optionally use `.req` chainable to hook\ninto the the request preperation invocation. Use\nthis to modify the request object to include post\nor querystring parameters, attach a file for\nupload, or any other operation that superagent\nprovides.\n\n```js\nchai.request(app)\n  .get('/')\n  .req(function (req) {\n    req.set('x-api-key', 'abc123');\n  })\n```\n\n\n### .res (cb)\n\n* **@param** _{Function}_ callback \n* **@cb** {Response}\n\nInvoke the request to to the server. The response\nwill be passed as a paramter to this function so\nthat further testing may be done. Use the `chai-http`\nassertions for testing.\n\n```js\nchai.request(app)\n  .get('/')\n  .res(function (res) {\n    expect(res).to.have.status(200);\n  });\n```\n\n\n## Assertions\n\nThe Chai HTTP module provides a number of assertions\nfor the `expect` and `should` interfaces.\n\n### .status (code)\n\n* **@param** _{Number}_ status number\n\nAssert that a response has a supplied status.\n\n```js\nexpect(res).to.have.status(200);\n```\n\n\n### .header (key[, value])\n\n* **@param** _{String}_ header key\n* **@param** _{String}_ header value (optional)\n\nAssert that an object has a header. If a value is\nprovided, equality to value will be asserted.\n\n```js\nexpect(req).to.have.header('x-api-key');\nexpect(req).to.have.header('content-type', 'text/plain');\n```\n\n\n### .headers\n\n\nAssert that an object has headers.\n\n```js\nexpect(req).to.have.headers;\n```\n\n\n### .ip\n\n\nAssert that a string represents valid ip address.\n\n```js\nexpect('127.0.0.1').to.be.an.ip;\nexpect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;\n```\n\n\n### .json / .text / .html\n\n\nAssert that a `Response` or `Request` object has a given content-type.\n\n```js\nexpect(req).to.be.json;\nexpect(req).to.be.html;\nexpect(req).to.be.text;\n```\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) Jake Luer <jake@alogicalparadox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chaijs/chai-http/issues"
  },
  "homepage": "https://github.com/chaijs/chai-http",
  "_id": "chai-http@0.4.0",
  "_shasum": "3494d560b794a92e75e9cd9934059ea988f5cb9f",
  "_from": "chai-http@",
  "_resolved": "https://registry.npmjs.org/chai-http/-/chai-http-0.4.0.tgz"
}
