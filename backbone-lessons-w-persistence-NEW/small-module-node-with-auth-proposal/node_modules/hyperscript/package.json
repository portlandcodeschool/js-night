{
  "name": "hyperscript",
  "version": "1.4.0",
  "homepage": "https://github.com/dominictarr/hyperscript",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/hyperscript.git"
  },
  "author": "'Dominic Tarr' <dominic.tarr@gmail.com> (http://dominictarr.com)",
  "license": "MIT",
  "devDependencies": {
    "html-element": "~1.1.0",
    "tape": "~0.2.2",
    "observable": "~2.1.2",
    "ispy": "~0.1.2",
    "simulate": "0.0.3"
  },
  "dependencies": {
    "class-list": "~0.1.0",
    "browser-split": "0.0.0",
    "data-set": "~0.2.2",
    "html-element": "~1.2.8",
    "tape": "~2.3.0"
  },
  "browser": {
    "html-element": false
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "dist": {
    "shasum": "d9c9b17f66e88bdc268eebd0c3d0b6642572ecf5",
    "tarball": "http://registry.npmjs.org/hyperscript/-/hyperscript-1.4.0.tgz"
  },
  "_id": "hyperscript@1.4.0",
  "readme": "# HyperScript\n\nCreate HyperText with JavaScript, on client or server.\n\n[![testling badge](https://ci.testling.com/dominictarr/hyperscript.png)]\n  (https://ci.testling.com/dominictarr/hyperscript)\n\n[Interactive Demo](http://dominictarr.github.com/hyperscript)\n\n## Example\n\n``` js\nvar h = require('hyperscript')\nh('div#page',\n  h('div#header',\n    h('h1.classy', 'h', { style: {'background-color': '#22f'} })),\n  h('div#menu', { style: {'background-color': '#2f2'} },\n    h('ul',\n      h('li', 'one'),\n      h('li', 'two'),\n      h('li', 'three'))),\n    h('h2', 'content title',  { style: {'background-color': '#f22'} }),\n    h('p', \n      \"so it's just like a templating engine,\\n\",\n      \"but easy to use inline with javascript\\n\"),\n    h('p', \n      \"the intension is for this to be used to create\\n\",\n      \"reusable, interactive html widgets. \"))\n```\n\n## on the server\n\nyou can still use hyperscript on the server,\nthe limitation is that events don't make sense any more,\nbut you can use it to generate html:\n\n``` js\nconsole.log(h('h1', 'hello!').outerHTML)\n=> '<h1>hello!</h1>'\n```\n\n## h (tag, attrs, [text?, Elements?,...])\n\nCreate an `HTMLElement`. The first argument must be the tag name, you may use a\nfully qualified tagname for building e.g. XML documents: `h('ns:tag').\n\n### classes & id\n\nIf the tag name is of form `name.class1.class2#id` that is a short cut\nfor setting the class and id.\n\n### default tag name\n\nIf the tag name begins with a class or id, it defaults to a `<div>`.\n\n### Attributes\n\nIf an `{}` object is passed in, it's values will be used to set attributes.\n\n``` js\nvar h = require('hyperscript')\nh('a', {href: 'https://npm.im/hyperscript'}, 'hyperscript')\n```\n\n### events\n\nIf an attribute is a function, then it will be registered as an event listener.\n\n``` js\nvar h = require('hyperscript')\nh('a', {href: '#', \n  onclick: function (e) {\n    alert('you are 1,000,000th visitor!')\n    e.preventDefault()\n  }\n}, 'click here to win a prize')\n```\n\n### styles\n\nIf an attribute has a style property, then that will be handled specially.\n\n``` js\nvar h = require('hyperscript')\nh('h1.fun', {style: {'font-family': 'Comic Sans MS'}}, 'Happy Birthday!')\n```\n\nor as a string\n\n``` js\nvar h = require('hyperscript')\nh('h1.fun', {style: 'font-family: Comic Sans MS'}}, 'Happy Birthday!')\n```\n\nYou may pass in attributes in multiple positions, it's no problem!\n\n### children - string\n\nIf an argument is a string, a TextNode is created in that position.\n\n### children - HTMLElement\n\nIf a argument is a `Node` (or `HTMLElement`), for example, the return value of a call to `h`\nthats cool too.\n\n### children - null.\n\nThis is just ignored.\n\n### children - Array\n\nEach item in the array is treated like a ordinary child. (string or HTMLElement)\nthis is uesful when you want to iterate over an object:\n\n``` js\nvar h = require('hyperscript')\nvar obj = {\n  a: 'Apple',\n  b: 'Banana',\n  c: 'Cherry',\n  d: 'Durian',\n  e: 'Elder Berry'\n}\nh('table',\n  h('tr', h('th', 'letter'), h('th', 'fruit')),\n  Object.keys(obj).map(function (k) {\n    return h('tr', \n      h('th', k),\n      h('td', obj[k])\n    )\n  })\n)\n```\n\n### Cleaning Up\n\nIf you need to clean up a widget created using hyperscript - deregistering all its event handlers and observable listeners, you can use `context()`.\n\n``` js\nvar h = require('hyperscript').context()\nvar o = require('observable')\nvar text = o()\ntext('click here to win a prize')\nh('a', {href: '#', \n  onclick: function (e) {\n    text('you are 1,000,000th visitor!')\n    e.preventDefault()\n  }\n}, text)\n\n// then if you want to remove this widget from the page\n// to cleanup\nh.cleanup()\n\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "d9c9b17f66e88bdc268eebd0c3d0b6642572ecf5",
  "_from": "hyperscript@",
  "_resolved": "https://registry.npmjs.org/hyperscript/-/hyperscript-1.4.0.tgz"
}
