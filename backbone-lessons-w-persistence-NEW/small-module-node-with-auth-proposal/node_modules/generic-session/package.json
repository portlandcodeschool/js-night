{
  "name": "generic-session",
  "description": "A generic web server session manager for use with any storage back-end",
  "version": "0.1.0",
  "homepage": "https://github.com/rvagg/node-generic-session",
  "authors": [
    "Rod Vagg @rvagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "keywords": [
    "session",
    "sessions"
  ],
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/rvagg/node-generic-session.git"
  },
  "dependencies": {
    "cookies": "~0.3.6",
    "keygrip": "~0.2.2",
    "lru-cache": "~2.2.1"
  },
  "optionalDependencies": {
    "keygrip": "~0.2.2",
    "lru-cache": "~2.2.1"
  },
  "devDependencies": {
    "tap": "*",
    "request": "~2.12.0"
  },
  "scripts": {
    "test": "tap ./tests/*-test.js"
  },
  "license": "MIT",
  "readme": "# Generic Session [![Build Status](https://secure.travis-ci.org/rvagg/node-generic-session.png)](http://travis-ci.org/rvagg/node-generic-session)\n\nA generic session manager with a simple, pluggable, storage-backend API. Usable with or without a Node.js web server framework.\n\nGeneric Session is largely based on [redsess](https://github.com/isaacs/redsess) by Isaac Schlueter, a session manager for Redis.\n\n## Example\n\n```js\n// server.js\nvar http           = require('http')\n  , genericSession = require('generic-session')\n  , store          = genericSession.MemoryStore()\n  , port           = 8080\n\nhttp.createServer(function (req, res) {\n  var session = genericSession(req, res, store)\n    , m\n\n  res.writeHead(200)\n\n  if (m = req.url.match(/^\\/get\\/(.+)/)) {\n    return session.get(m[1], function (err, data) {\n      res.end(JSON.stringify(data))\n    })\n  } else if (m = req.url.match(/^\\/set\\/([^\\/]+)\\/(.+)/)) {\n    return session.set(m[1], m[2], function () {\n      res.end(JSON.stringify(m[2]))\n    })\n  }\n  res.end('ERROR')\n}).listen(port)\n```\n\n```js\n// client.js\nvar request = require('request')\n  , jar     = request.jar()\n  , port    = 8080\n\n  , req     = function(url, cb) {\n      request({\n          url: 'http://localhost:' + port + '/' + url\n        , jar: jar\n        , json: true\n      }, cb)\n    }\n\nreq('set/foo/bar', function () {\n  console.log('Set foo = bar')\n  req('get/foo', function (e, res, body) {\n    console.log('Fetched foo =', body)\n  })\n})\n```\n\nRunning the two processes, we'll get:\n\n```sh\n$ node server.js &\n$ node client.js\nSet foo = bar\nFetched foo = bar\n```\n\nThis example is available in the *examples/* directory.\n\n## API\n\n### genericSession(request, response, store[, options])\nWill create a new `GenericSession` for the given HTTP `request` and `response` objects against the compatible `store` object (see Store API below).\n\nGenericSession uses [Cookies](https://github.com/jed/cookies) to keep track of the session by attaching a random session id cookie to the `response` and fetching it from the `request`. Cookies can be optionally signed using [Keygrip](https://github.com/jed/keygrip).\n\n#### Options:\n\n * `keys` (optional): either an `Array` of strings constituting your signing secret keys to be passed to a new instance of *Keygrip*, or you can pass in an instance of **Keygrip directly. If you pass in a `keys` instance, Keygrip must be installed.\n * `cookies` (optional): provide an instance of Cookies or a compatible cookie manager to use to manage cookies.\n * `expire` (optional, default: 2 weeks): number of seconds to set for the session cookie expiry.\n * `cookieName` (optional, default: `'s'`): the name of the session cookie.\n * `idPrefix` (optional, default: `'session:'`): the prefix of the session ID, used when interacting with the session store (see Store API below). If set to `''` then the random session token will be used as the ID.\n\n-------------------------\n\n### genericSession.filter(store[, options])\n<strong>Also available as: genericSession.middleware(store[, options]) if that floats your boat</strong>\n\nReturns a standard framework filter / middleware, i.e. a function with the signature `function (request, response, next)`. The filter is a simple helper that will attach a GenericSession instance to both the `request` and `reponse` with the key `session`.\n\n-------------------------\n\n### genericSession.MemoryStore([ options ])\n\n***Don't use this in production.*** *This is only meant for example & testing purposes.*\n\nA simple MemoryStore that implements the Store API (see below). Ideally a session store would be persistent and also capable of operating across multiple servers.\n\nMemoryStore is backed by [lru-cache](https://github.com/isaacs/node-lru-cache) which is an optional dependency so it needs to be installed if you want to use this.\n\nMemoryStore takes an optional `options` object that can be used to override the default `cache` settings for `max` and `maxAge` (e.g. provide `{ cache: { maxAge: 1000 * 60 * 60 } }`). Note that MemoryStore will ignore the `expire` option from Generic Store and will obey the `maxAge` cache option. The default is 2-weeks to match the Generic Store defaults.\n\n-------------------------\n\n### session.get(key[, callback])\nGet the object stored as `key` for the current session in the session store. Automatically updates the expires time for this session.\n\nIf the `callback` is not provided then it will simply perform an expiry time update. If you just provide a `callback` and no `key` then it operates as an alias for `getAll()`.\n\n`get()` is always asynchronous, if you want the data, provide a callback.\n\n-------------------------\n\n### session.getAll(callback)\nGet all objects stored for the current session in the session store. Automatically updates the expires time for this session.\n\nIf the `callback` is not provided then it will simply perform an expiry time update.\n\n`getAll()` is always asynchronous, if you want the data, provide a callback.\n\n-------------------------\n\n### session.set(key[, value][, callback])\nSets `value` as `key` for the current session in the session store. Automatically updates the expires time for this session.\n\nIf `value` is omitted then `key` will be set to `null`. `callback` may be omitted and the operation will still be performed.\n\n`set()` is always asynchronous.\n\n-------------------------\n\n### session.del(key[, callback])\nDeletes the property `key` from the current session in the session store. Automatically updates the expires time for this session.\n\nIf `key` is omitted then it operates as an alias for `delAll()` (beware!). `callback` may be omitted and the operation will still be performed.\n\n`del()` is always asynchronous.\n\n-------------------------\n\n### session.delAll([callback])\nDeletes all data for the current session in the session store.\n\n`callback` may be omitted and the operation will still be performed.\n\n`delAll()` is always asynchronous.\n\n-------------------------\n\n### session.destroy([callback])\nDeletes all data for the current session in the session store and will also remove the session cookie from the client.\n\n`callback` may be omitted and the operation will still be performed.\n\n`destroy()` is always asynchronous.\n\n-------------------------\n\n## Store API\n\nGenericSession needs somewhere to store session data! It's bundled with a `MemoryStore` (see above) but you are advised to not use it in production. When creating a GenericSession object, you should provide a compatible store that conforms to the following API. Note, it's fairly easy to wrap your favourite store/db in this API. All operations are asynchronous and a `callback` will always provided (except for `extend()`), even if the client doesn't provide one:\n\n### store.get(id, key, expire, callback)\nReturn the value of `key` for the session identified by `id`, also update the expires time to `expire` seconds from now.\n\n-------------------------\n\n### store.getAll(id, expire, callback)\nReturn the an object representing all values set for the session identified by `id`, also update the expires time to `expire` seconds from now.\n\n-------------------------\n\n### store.set(id, key, value, expire, callback)\nSet `key` to be equal to `value` for the session identified by `id`, also update the expires time to `expire` seconds from now.\n\n-------------------------\n\n### store.del(id, key, expire, callback)\nDelete the property `key` from the session identified by `id`, also update the expires time to `expire` seconds from now.\n\n-------------------------\n\n### store.delAll(id, callback)\nDelete all values for the session identified by `id`.\n\n-------------------------\n\n### store.extend(id, expire)\nUpdate the expiry time to `expire` seconds from now for the the session identified by `id`.\n\n## Licence\n\nGeneric Session is Copyright (c) 2012 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n\nGeneric Session builds on [redsess](https://github.com/isaacs/redsess) by Isaac Schlueter.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rvagg/node-generic-session/issues"
  },
  "_id": "generic-session@0.1.0",
  "dist": {
    "shasum": "4bee7233574edc3411f44803f3f9d423cf8d9bf9",
    "tarball": "http://registry.npmjs.org/generic-session/-/generic-session-0.1.0.tgz"
  },
  "_from": "generic-session@",
  "_npmVersion": "1.3.15",
  "_npmUser": {
    "name": "rvagg",
    "email": "rod@vagg.org"
  },
  "maintainers": [
    {
      "name": "rvagg",
      "email": "rod@vagg.org"
    }
  ],
  "directories": {},
  "_shasum": "4bee7233574edc3411f44803f3f9d423cf8d9bf9",
  "_resolved": "https://registry.npmjs.org/generic-session/-/generic-session-0.1.0.tgz"
}
